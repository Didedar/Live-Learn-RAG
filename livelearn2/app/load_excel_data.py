#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–∞ —Å eGov —É—Å–ª—É–≥–∞–º–∏ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ RAG —Å–∏—Å—Ç–µ–º—ã.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python load_excel_data.py

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
1. –ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel —Ñ–∞–π–ª–∞ 'data_for_rag 1.xlsx'
2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± —É—Å–ª—É–≥–∞—Ö eGov
3. –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Ö –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —á–µ—Ä–µ–∑ API
"""

import asyncio
import json
import logging
from pathlib import Path
from typing import List, Dict, Any

import httpx
from loguru import logger


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
EXCEL_FILE_PATH = "data_for_rag 1.xlsx"
API_BASE_URL = "http://localhost:8000"
BATCH_SIZE = 50  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –æ–¥–Ω–æ–º batch –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏


async def read_excel_data() -> List[Dict[str, Any]]:
    """
    –ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel —Ñ–∞–π–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç JavaScript —á–µ—Ä–µ–∑ repl –¥–ª—è —á—Ç–µ–Ω–∏—è Excel —Ñ–∞–π–ª–∞,
    —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ø–æ—Å–æ–± –≤ –¥–∞–Ω–Ω–æ–π —Å—Ä–µ–¥–µ.
    """
    logger.info(f"–ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel —Ñ–∞–π–ª–∞: {EXCEL_FILE_PATH}")
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –¥–ª—è —á—Ç–µ–Ω–∏—è Excel
    # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    
    # –ó–∞–≥–ª—É—à–∫–∞ —Å –ø—Ä–∏–º–µ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π)
    sample_data = [
        {
            "id": 1,
            "name": "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–µ—Å—Ç—É –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –≥—Ä–∞–∂–¥–∞–Ω —Ä–µ—Å–ø—É–±–ª–∏–∫–∏ –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω",
            "eGov_link": "https://egov.kz/cms/ru/services/pass001_mvd",
            "chunks": "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —É—Å–ª—É–≥—É –æ–Ω–ª–∞–π–Ω\r\n–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ –∏ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ –∫–Ω–æ–ø–∫–µ ¬´–ó–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É –æ–Ω–ª–∞–π–Ω¬ª...",
            "eGov_kaz_link": "https://egov.kz/cms/kk/services/pass001_mvd"
        },
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—Å–µ 845 –∑–∞–ø–∏—Å–µ–π
    ]
    
    logger.warning("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –æ–±—Ä–∞–∑—Ü—ã –¥–∞–Ω–Ω—ã—Ö. –î–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π Excel —Ñ–∞–π–ª.")
    return sample_data


async def upload_data_batch(client: httpx.AsyncClient, data_batch: List[Dict[str, Any]]) -> bool:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç batch –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API.
    
    Args:
        client: HTTP –∫–ª–∏–µ–Ω—Ç
        data_batch: Batch –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        
    Returns:
        True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
    """
    try:
        logger.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º batch –∏–∑ {len(data_batch)} –∑–∞–ø–∏—Å–µ–π...")
        
        response = await client.post(
            f"{API_BASE_URL}/api/api/v1/ingest/egov-data",
            json=data_batch,
            timeout=120.0  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        )
        
        response.raise_for_status()
        result = response.json()
        
        logger.info(
            f"Batch —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: –¥–æ–∫—É–º–µ–Ω—Ç ID {result['document_id']}, "
            f"—Å–æ–∑–¥–∞–Ω–æ {result['chunks']} —á–∞–Ω–∫–æ–≤"
        )
        
        return True
        
    except httpx.HTTPStatusError as e:
        logger.error(f"HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ batch: {e.response.status_code} - {e.response.text}")
        return False
    except httpx.RequestError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ batch: {e}")
        return False
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ batch: {e}")
        return False


async def check_api_health() -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ API –¥–æ—Å—Ç—É–ø–Ω–æ –∏ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ.
    
    Returns:
        True –µ—Å–ª–∏ API –≥–æ—Ç–æ–≤–æ, False –µ—Å–ª–∏ –Ω–µ—Ç
    """
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{API_BASE_URL}/healthz", timeout=10.0)
            response.raise_for_status()
            
            health_data = response.json()
            logger.info(f"API —Å—Ç–∞—Ç—É—Å: {health_data.get('status')}")
            
            if not health_data.get('ai_configured', False):
                logger.warning("‚ö†Ô∏è  AI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ GOOGLE_API_KEY")
                return False
            
            return health_data.get('status') == 'ok'
            
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API: {e}")
        return False


async def get_current_stats() -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É RAG —Å–∏—Å—Ç–µ–º—ã.
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{API_BASE_URL}/api/v1/stats", timeout=10.0)
            response.raise_for_status()
            return response.json()
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")
        return {}


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö."""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö eGov –≤ RAG —Å–∏—Å—Ç–µ–º—É")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    logger.info("üì° –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API...")
    if not await check_api_health():
        logger.error("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω GOOGLE_API_KEY")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏
    stats_before = await get_current_stats()
    logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏: {stats_before.get('documents', 0)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, {stats_before.get('chunks', 0)} —á–∞–Ω–∫–æ–≤")
    
    # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel
    try:
        excel_data = await read_excel_data()
        logger.info(f"üìñ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(excel_data)} –∑–∞–ø–∏—Å–µ–π –∏–∑ Excel —Ñ–∞–π–ª–∞")
        
        if not excel_data:
            logger.error("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
            return
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞: {e}")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ batches
    total_batches = (len(excel_data) + BATCH_SIZE - 1) // BATCH_SIZE
    successful_batches = 0
    failed_batches = 0
    
    logger.info(f"üì¶ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ {total_batches} batches –ø–æ {BATCH_SIZE} –∑–∞–ø–∏—Å–µ–π")
    
    async with httpx.AsyncClient() as client:
        for i in range(0, len(excel_data), BATCH_SIZE):
            batch_num = (i // BATCH_SIZE) + 1
            batch_data = excel_data[i:i + BATCH_SIZE]
            
            logger.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º batch {batch_num}/{total_batches}")
            
            if await upload_data_batch(client, batch_data):
                successful_batches += 1
                logger.info(f"‚úÖ Batch {batch_num} –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                failed_batches += 1
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ batch {batch_num}")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É batches
            if i + BATCH_SIZE < len(excel_data):
                await asyncio.sleep(1)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats_after = await get_current_stats()
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    logger.info("üéâ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö batches: {successful_batches}")
    logger.info(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö batches: {failed_batches}")
    logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏: {stats_after.get('documents', 0)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, {stats_after.get('chunks', 0)} —á–∞–Ω–∫–æ–≤")
    
    if stats_before and stats_after:
        docs_added = stats_after.get('documents', 0) - stats_before.get('documents', 0)
        chunks_added = stats_after.get('chunks', 0) - stats_before.get('chunks', 0)
        logger.info(f"üìà –î–æ–±–∞–≤–ª–µ–Ω–æ: {docs_added} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, {chunks_added} —á–∞–Ω–∫–æ–≤")
    
    if failed_batches > 0:
        logger.warning(f"‚ö†Ô∏è  {failed_batches} batches –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.")
    else:
        logger.info("üéä –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ!")


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger.remove()
    logger.add(
        lambda msg: print(msg, end=''),
        format="<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | {message}",
        level="INFO"
    )
    
    # –ó–∞–ø—É—Å–∫
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("\nüõë –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ eGov –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π endpoint.
"""

import asyncio
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import pandas as pd
import httpx
from loguru import logger
from pathlib import Path

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
EXCEL_FILE = "data_for_rag (1).xlsx"
API_BASE_URL = "http://localhost:8000"


async def check_api():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API."""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{API_BASE_URL}/healthz", timeout=5.0)
            if response.status_code == 200:
                logger.info("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω")
                return True
            else:
                logger.error(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        return False


async def load_excel_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel —Ñ–∞–π–ª–∞."""
    try:
        logger.info(f"üìñ –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª: {EXCEL_FILE}")
        
        # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
        df = pd.read_excel(EXCEL_FILE)
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –≤ Excel —Ñ–∞–π–ª–µ")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        logger.info(f"üìã –ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ —Å –Ω–µ–ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        df_clean = df.dropna(subset=['name'])  # –¢–æ–ª—å–∫–æ name –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
        df_clean = df_clean[df_clean['name'].str.strip() != '']
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–µ chunks –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
        df_clean['chunks'] = df_clean['chunks'].fillna('')
        
        logger.info(f"üßπ –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å {len(df_clean)} –∑–∞–ø–∏—Å–µ–π —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏")
        
        return df_clean
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel —Ñ–∞–π–ª–∞: {e}")
        return None


async def ingest_egov_data(df):
    """–ó–∞–≥—Ä—É–∂–∞–µ–º eGov –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π endpoint."""
    try:
        async with httpx.AsyncClient(timeout=120.0) as client:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º DataFrame –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
            data_list = []
            
            for index, row in df.iterrows():
                record = {
                    'id': int(row.get('id', index+1)) if pd.notna(row.get('id')) else index+1,
                    'name': str(row.get('name', '')).strip(),
                    'eGov_link': str(row.get('eGov_link', '')).strip() if pd.notna(row.get('eGov_link')) else '',
                    'chunks': str(row.get('chunks', '')).strip() if pd.notna(row.get('chunks')) else '',
                    'eGov_kaz_link': str(row.get('eGov_kaz_link', '')).strip() if pd.notna(row.get('eGov_kaz_link')) else ''
                }
                
                # –£–±–∏—Ä–∞–µ–º –∑–∞–ø–∏—Å–∏ –≥–¥–µ chunks –ø—É—Å—Ç–æ–π –∏–ª–∏ 'nan'
                if record['chunks'] and record['chunks'] != 'nan' and len(record['chunks']) > 10:
                    data_list.append(record)
            
            logger.info(f"üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(data_list)} –∑–∞–ø–∏—Å–µ–π —Å —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
            
            if not data_list:
                logger.error("‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
                return 0
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            logger.info("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ API...")
            
            response = await client.post(
                f"{API_BASE_URL}/api/v1/ingest/egov-data",
                json=data_list
            )
            
            if response.status_code == 200:
                result = response.json()
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ! –û—Ç–≤–µ—Ç: {result}")
                return len(data_list)
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.status_code} - {response.text}")
                return 0
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ eGov –¥–∞–Ω–Ω—ã—Ö: {e}")
        return 0


async def get_stats():
    """–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{API_BASE_URL}/api/v1/stats")
            if response.status_code == 200:
                stats = response.json()
                logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats.get('total_documents', stats.get('documents', 0))} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, {stats.get('total_chunks', stats.get('chunks', 0))} —á–∞–Ω–∫–æ–≤")
                return stats
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
                return None
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return None


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É eGov –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel")
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º API
    if not await check_api():
        logger.error("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
        return
    
    # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel
    df = await load_excel_data()
    if df is None or len(df) == 0:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel –∏–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π")
        return
    
    # 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏
    logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –î–û –∑–∞–≥—Ä—É–∑–∫–∏:")
    await get_stats()
    
    # 4. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–∏—Å—Ç–µ–º—É
    success_count = await ingest_egov_data(df)
    
    # 5. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ü–û–°–õ–ï –∑–∞–≥—Ä—É–∑–∫–∏:")
    await get_stats()
    
    if success_count > 0:
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –ó–∞–≥—Ä—É–∂–µ–Ω–æ {success_count} —É—Å–ª—É–≥ eGov")
        logger.info("üéØ –í–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–µ –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ pandas
    try:
        import pandas as pd
    except ImportError:
        logger.error("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å pandas: pip install pandas openpyxl")
        sys.exit(1)
    
    asyncio.run(main())



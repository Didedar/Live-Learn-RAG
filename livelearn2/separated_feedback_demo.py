"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ñ–∏–¥–±—ç–∫–∞.

–≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –Ω–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ç–µ—á–∫–∏
–º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
"""

import asyncio
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.database import get_db, init_db
from app.services.separated_rag_pipeline import SeparatedRAGPipeline


async def demo_separated_feedback():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ñ–∏–¥–±—ç–∫–∞."""
    
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ñ–∏–¥–±—ç–∫–∞")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init_db()
    db = next(get_db())
    pipeline = SeparatedRAGPipeline()
    
    try:
        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        print("\nüìö –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ docs_index...")
        
        await pipeline.ingest_text(
            db=db,
            text="""
            –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ ‚Äî —ç—Ç–æ –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç 
            –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π. –≠—Ç–æ —Ä–∞–∑–¥–µ–ª –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, 
            –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –∏–¥–µ–µ, —á—Ç–æ —Å–∏—Å—Ç–µ–º—ã –º–æ–≥—É—Ç —É—á–∏—Ç—å—Å—è –Ω–∞ –¥–∞–Ω–Ω—ã—Ö.
            """,
            metadata={"topic": "machine_learning", "source": "educational"},
            uri="docs://ml_basics"
        )
        
        await pipeline.ingest_text(
            db=db,
            text="""
            –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Å—Ç—ã ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å. –ù—É–∂–Ω–æ –≤—Å–∫–∏–ø—è—Ç–∏—Ç—å 
            –≤–æ–¥—É, –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–ª—å, –∑–∞—Ç–µ–º –ø–∞—Å—Ç—É. –í–∞—Ä–∏—Ç—å —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∞ —É–ø–∞–∫–æ–≤–∫–µ, 
            –æ–±—ã—á–Ω–æ 8-12 –º–∏–Ω—É—Ç –¥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–ª—å –¥–µ–Ω—Ç–µ.
            """,
            metadata={"topic": "cooking", "source": "recipe"},
            uri="docs://pasta_recipe"
        )
        
        print("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ docs_index")
        
        # 2. –ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –æ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏
        print("\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1 —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏...")
        
        result_ml_1 = await pipeline.ask(
            question="–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?",
            db=db,
            user_id="user_1",
            session_id="session_1"
        )
        
        print(f"ü§ñ –û—Ç–≤–µ—Ç: {result_ml_1['answer'][:100]}...")
        print(f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤: {len(result_ml_1['contexts'])}")
        
        # 3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1 –¥–∞–µ—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π —Ñ–∏–¥–±—ç–∫
        print("\nüëé –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1 –¥–∞–µ—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π —Ñ–∏–¥–±—ç–∫...")
        
        feedback_id_1 = await pipeline.store_user_feedback(
            db=db,
            message_id=result_ml_1["message_id"],
            feedback_label="reject",
            target_doc_ids=[1],  # –î–æ–∫—É–º–µ–Ω—Ç –æ ML
            target_chunk_ids=[1],
            user_id="user_1",
            notes="–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–æ–µ, –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π"
        )
        
        print(f"‚úÖ –§–∏–¥–±—ç–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ feedback_store: {feedback_id_1[:8]}...")
        
        # 4. –í—Ç–æ—Ä–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–µ—Ç –ø–æ—Ö–æ–∂–∏–π –≤–æ–ø—Ä–æ—Å
        print("\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2 —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏...")
        
        result_ml_2 = await pipeline.ask(
            question="–û–±—ä—è—Å–Ω–∏ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
            db=db,
            user_id="user_2",
            session_id="session_2"
        )
        
        print(f"ü§ñ –û—Ç–≤–µ—Ç: {result_ml_2['answer'][:100]}...")
        print(f"üìä –§–∏–¥–±—ç–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω: {result_ml_2.get('feedback_applied_count', 0)} —Ä–∞–∑")
        
        # 5. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1 –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –æ –≥–æ—Ç–æ–≤–∫–µ
        print("\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1 —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –≥–æ—Ç–æ–≤–∫–µ...")
        
        result_cooking = await pipeline.ask(
            question="–ö–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –ø–∞—Å—Ç—É?",
            db=db,
            user_id="user_1",
            session_id="session_1"
        )
        
        print(f"ü§ñ –û—Ç–≤–µ—Ç: {result_cooking['answer'][:100]}...")
        print(f"üìä –§–∏–¥–±—ç–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω: {result_cooking.get('feedback_applied_count', 0)} —Ä–∞–∑")
        
        # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è...")
        
        stats = await pipeline.get_feedback_stats(db)
        
        print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∏–¥–±—ç–∫ —Å–∏—Å—Ç–µ–º—ã:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π —Ñ–∏–¥–±—ç–∫–∞: {stats['total_feedback_entries']}")
        print(f"   ‚Ä¢ –õ–æ–∫–∞–ª—å–Ω—ã–π scope: {stats['local_scope']}")
        print(f"   ‚Ä¢ –ì–ª–æ–±–∞–ª—å–Ω—ã–π scope: {stats['global_scope']}")
        print(f"   ‚Ä¢ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: {stats['separation_integrity']}")
        
        # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∏–¥–±—ç–∫ –Ω–µ –ø–æ–ø–∞–ª –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
        print("\nüõ°Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ—Ç–µ—á–µ–∫...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –≤—Ç–æ—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        contamination_found = False
        for context in result_ml_2['contexts']:
            context_text = context.get('text', '')
            if '—Å–ª–∏—à–∫–æ–º –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–æ–µ' in context_text:
                contamination_found = True
                break
        
        if contamination_found:
            print("‚ùå –û–®–ò–ë–ö–ê: –ù–∞–π–¥–µ–Ω–∞ –ø—Ä–æ—Ç–µ—á–∫–∞ —Ñ–∏–¥–±—ç–∫–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã!")
        else:
            print("‚úÖ –ü—Ä–æ—Ç–µ—á–µ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ - —Ñ–∏–¥–±—ç–∫ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω")
        
        # 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∏–¥–±—ç–∫ –ø–æ ML –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –≥–æ—Ç–æ–≤–∫—É
        cooking_affected = result_cooking.get('feedback_applied_count', 0) > 0
        
        if cooking_affected:
            print("‚ùå –û–®–ò–ë–ö–ê: –§–∏–¥–±—ç–∫ –ø–æ ML –ø–æ–≤–ª–∏—è–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –≥–æ—Ç–æ–≤–∫–µ!")
        else:
            print("‚úÖ –ì–µ–π—Ç–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç - —Ñ–∏–¥–±—ç–∫ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º –Ω–∞–º–µ—Ä–µ–Ω–∏—è–º")
        
        # 9. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ü–∏—é –±–µ–∑ –∫–æ–Ω—Ç–∞–º–∏–Ω–∞—Ü–∏–∏
        print("\nüîß –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ü–∏—é –±–µ–∑ –∫–æ–Ω—Ç–∞–º–∏–Ω–∞—Ü–∏–∏...")
        
        feedback_id_2 = await pipeline.store_user_feedback(
            db=db,
            message_id=result_cooking["message_id"],
            feedback_label="fix",
            target_doc_ids=[2],  # –î–æ–∫—É–º–µ–Ω—Ç –æ –≥–æ—Ç–æ–≤–∫–µ
            target_chunk_ids=[2],
            user_id="user_1",
            correction_text="–í–∞–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å, —á—Ç–æ –≤–æ–¥—É –Ω—É–∂–Ω–æ —Å–æ–ª–∏—Ç—å –ü–û–°–õ–ï –∑–∞–∫–∏–ø–∞–Ω–∏—è, –∞ –Ω–µ –¥–æ.",
            notes="–£—Ç–æ—á–Ω–µ–Ω–∏–µ –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è"
        )
        
        print(f"‚úÖ –ö–æ—Ä—Ä–µ–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {feedback_id_2[:8]}...")
        
        # –ó–∞–¥–∞–µ–º —Ç–æ—Ç –∂–µ –≤–æ–ø—Ä–æ—Å —Å–Ω–æ–≤–∞
        result_cooking_2 = await pipeline.ask(
            question="–ö–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –ø–∞—Å—Ç—É?",
            db=db,
            user_id="user_1",
            session_id="session_1"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –ù–ï –ø–æ–ø–∞–ª –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
        correction_leaked = False
        for context in result_cooking_2['contexts']:
            if '–ü–û–°–õ–ï –∑–∞–∫–∏–ø–∞–Ω–∏—è' in context.get('text', ''):
                correction_leaked = True
                break
        
        if correction_leaked:
            print("‚ùå –û–®–ò–ë–ö–ê: –¢–µ–∫—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –ø–æ–ø–∞–ª –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã!")
        else:
            print("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–µ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        print(f"üìä –ö–æ—Ä—Ä–µ–∫—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∏–¥–±—ç–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω: {result_cooking_2.get('feedback_applied_count', 0)} —Ä–∞–∑")
        
        print("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("\nüìã –†–µ–∑—é–º–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:")
        print("   ‚Ä¢ docs_index: —Å–æ–¥–µ—Ä–∂–∏—Ç –¢–û–õ–¨–ö–û –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
        print("   ‚Ä¢ feedback_store: –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∏–¥–±—ç–∫–∞ —Å intent_key")
        print("   ‚Ä¢ –ñ–µ—Å—Ç–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã: —Ñ–∏–¥–±—ç–∫ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏–π")
        print("   ‚Ä¢ –ü–µ—Ä–µ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ: —Ñ–∏–¥–±—ç–∫ –≤–ª–∏—è–µ—Ç –Ω–∞ –ø–æ—Ä—è–¥–æ–∫, –Ω–æ –Ω–µ –Ω–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ")
        print("   ‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ—Ç–µ—á–µ–∫: —Ç–µ–∫—Å—Ç—ã —Ñ–∏–¥–±—ç–∫–∞ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–ø–∞–¥–∞—é—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        db.close()


async def check_separation_integrity():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è...")
    
    db = next(get_db())
    
    try:
        from app.models.documents import Chunk
        from app.models.intent_feedback import IntentFeedback
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º docs_index
        total_chunks = db.query(Chunk).count()
        original_chunks = db.query(Chunk).filter(Chunk.source == "original").count()
        feedback_chunks = db.query(Chunk).filter(Chunk.source == "user_feedback").count()
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ docs_index:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —á–∞–Ω–∫–æ–≤: {total_chunks}")
        print(f"   ‚Ä¢ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö: {original_chunks}")
        print(f"   ‚Ä¢ –ò–∑ —Ñ–∏–¥–±—ç–∫–∞: {feedback_chunks}")
        
        if feedback_chunks > 0:
            print("‚ùå –ö–û–ù–¢–ê–ú–ò–ù–ê–¶–ò–Ø –û–ë–ù–ê–†–£–ñ–ï–ù–ê!")
        else:
            print("‚úÖ docs_index —á–∏—Å—Ç –æ—Ç –∫–æ–Ω—Ç–∞–º–∏–Ω–∞—Ü–∏–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º feedback_store
        total_feedback = db.query(IntentFeedback).count()
        feedback_with_intent = db.query(IntentFeedback).filter(
            IntentFeedback.intent_key.isnot(None)
        ).count()
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ feedback_store:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π —Ñ–∏–¥–±—ç–∫–∞: {total_feedback}")
        print(f"   ‚Ä¢ –° intent_key: {feedback_with_intent}")
        
        if total_feedback == feedback_with_intent:
            print("‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ —Ñ–∏–¥–±—ç–∫–∞ –∏–º–µ—é—Ç intent_key")
        else:
            print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–∏—Å–∏ —Ñ–∏–¥–±—ç–∫–∞ –±–µ–∑ intent_key")
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        integrity_score = 100
        if feedback_chunks > 0:
            integrity_score -= 50
        if total_feedback != feedback_with_intent:
            integrity_score -= 30
        
        print(f"\nüèÜ –û—Ü–µ–Ω–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏: {integrity_score}%")
        
    finally:
        db.close()


if __name__ == "__main__":
    print("üîß –°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∏–¥–±—ç–∫–∞ - Live-Learn RAG")
    print("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –±–µ–∑ –ø—Ä–æ—Ç–µ—á–µ–∫")
    print()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
    asyncio.run(demo_separated_feedback())
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
    asyncio.run(check_separation_integrity())



#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ RAG —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π –ø—Ä–æ–±–ª–µ–º.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python test_enhanced_rag.py
"""

import asyncio
import json
from pathlib import Path
from typing import List, Dict, Any

import httpx
from loguru import logger


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = "http://localhost:8000"
TEST_QUERIES = [
    "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –æ –Ω–µ—Å—É–¥–∏–º–æ—Å—Ç–∏?",
    "–ß—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –º–µ—Å—Ç—É –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞?",
    "–ö–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ò–ü –æ–Ω–ª–∞–π–Ω?",
    "–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞?",
    "–ö–∞–∫ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ egov.kz?",
]


async def test_api_health() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API."""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{API_BASE_URL}/healthz", timeout=10.0)
            response.raise_for_status()
            
            health_data = response.json()
            logger.info(f"API —Å—Ç–∞—Ç—É—Å: {health_data.get('status')}")
            
            return health_data.get('status') == 'ok'
            
    except Exception as e:
        logger.error(f"API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False


async def test_debug_retrieve(query: str) -> Dict[str, Any]:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç debug endpoint –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ä–µ—Ç—Ä–∏–≤–µ—Ä–∞."""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(
                f"{API_BASE_URL}/api/v1/debug/retrieve",
                params={"q": query, "k": 10, "threshold": 0.1},
                timeout=30.0
            )
            response.raise_for_status()
            return response.json()
            
    except Exception as e:
        logger.error(f"Debug retrieve failed for '{query}': {e}")
        return {"error": str(e)}


async def test_enhanced_query(query: str) -> Dict[str, Any]:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π RAG endpoint."""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{API_BASE_URL}/api/v1/enhanced/query",
                json={"query": query, "top_k": 4},
                timeout=30.0
            )
            response.raise_for_status()
            return response.json()
            
    except Exception as e:
        logger.error(f"Enhanced query failed for '{query}': {e}")
        return {"error": str(e)}


async def test_hybrid_debug(query: str) -> Dict[str, Any]:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç debug endpoint –¥–ª—è –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞."""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(
                f"{API_BASE_URL}/api/v1/enhanced/debug/hybrid-retrieve",
                params={
                    "q": query,
                    "k": 8,
                    "alpha": 0.6,
                    "mmr_lambda": 0.15
                },
                timeout=30.0
            )
            response.raise_for_status()
            return response.json()
            
    except Exception as e:
        logger.error(f"Hybrid debug failed for '{query}': {e}")
        return {"error": str(e)}


async def compare_rag_methods(query: str) -> Dict[str, Any]:
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã RAG –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."""
    logger.info(f"üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ RAG –¥–ª—è: '{query}'")
    
    results = {"query": query}
    
    # 1. –û–±—ã—á–Ω—ã–π RAG
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{API_BASE_URL}/api/v1/query",
                json={"query": query, "top_k": 4},
                timeout=30.0
            )
            if response.status_code == 200:
                data = response.json()
                results["basic_rag"] = {
                    "answer_length": len(data.get("answer", "")),
                    "contexts_found": len(data.get("citations", [])),
                    "top_scores": [c.get("score", 0) for c in data.get("citations", [])[:3]]
                }
            else:
                results["basic_rag"] = {"error": f"HTTP {response.status_code}"}
    except Exception as e:
        results["basic_rag"] = {"error": str(e)}
    
    # 2. Enhanced RAG
    enhanced_result = await test_enhanced_query(query)
    if "error" not in enhanced_result:
        results["enhanced_rag"] = {
            "answer_length": len(enhanced_result.get("answer", "")),
            "contexts_found": len(enhanced_result.get("citations", [])),
            "top_scores": [c.get("score", 0) for c in enhanced_result.get("citations", [])[:3]]
        }
    else:
        results["enhanced_rag"] = enhanced_result
    
    # 3. Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    debug_result = await test_debug_retrieve(query)
    if "error" not in debug_result:
        results["debug_info"] = {
            "total_results": debug_result.get("diagnostics", {}).get("total_results", 0),
            "embedding_coverage": debug_result.get("diagnostics", {}).get("embedding_coverage", 0),
            "max_score": debug_result.get("diagnostics", {}).get("max_score", 0)
        }
    
    # 4. Hybrid debug
    hybrid_result = await test_hybrid_debug(query)
    if "error" not in hybrid_result:
        results["hybrid_debug"] = {
            "dense_count": hybrid_result.get("diagnostics", {}).get("dense_count", 0),
            "keyword_count": hybrid_result.get("diagnostics", {}).get("keyword_count", 0),
            "fused_count": hybrid_result.get("diagnostics", {}).get("fused_count", 0),
            "embedding_service": hybrid_result.get("diagnostics", {}).get("embedding_service_active", "unknown")
        }
    
    return results


async def get_system_stats() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã."""
    try:
        async with httpx.AsyncClient() as client:
            # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            response = await client.get(f"{API_BASE_URL}/api/v1/stats", timeout=10.0)
            basic_stats = response.json() if response.status_code == 200 else {}
            
            # Enhanced —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            response = await client.get(f"{API_BASE_URL}/api/v1/enhanced/stats", timeout=10.0)
            enhanced_stats = response.json() if response.status_code == 200 else {}
            
            return {
                "basic": basic_stats,
                "enhanced": enhanced_stats
            }
            
    except Exception as e:
        logger.error(f"Failed to get system stats: {e}")
        return {"error": str(e)}


async def diagnose_retrieval_issues():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ—Ç—Ä–∏–≤–µ—Ä–æ–º."""
    logger.info("üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å —Ä–µ—Ç—Ä–∏–≤–µ—Ä–æ–º")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
    stats = await get_system_stats()
    
    logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:")
    if "basic" in stats:
        basic = stats["basic"]
        logger.info(f"  - –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {basic.get('documents', 0)}")
        logger.info(f"  - –ß–∞–Ω–∫–æ–≤: {basic.get('chunks', 0)}")
        logger.info(f"  - –ü–æ–∫—Ä—ã—Ç–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏: {basic.get('embedding_coverage', 0):.2%}")
    
    if "enhanced" in stats:
        enhanced = stats["enhanced"]
        logger.info(f"  - –¢–∏–ø –ø–∞–π–ø–ª–∞–π–Ω–∞: {enhanced.get('pipeline_type', 'unknown')}")
        logger.info(f"  - –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–æ–≤: {enhanced.get('chunk_size', 0)} —Ç–æ–∫–µ–Ω–æ–≤")
        logger.info(f"  - –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ —á–∞–Ω–∫–æ–≤: {enhanced.get('chunk_overlap', 0)} —Ç–æ–∫–µ–Ω–æ–≤")
        logger.info(f"  - –ü–æ—Ä–æ–≥ —Ä–µ—Ç—Ä–∏–≤–µ—Ä–∞: {enhanced.get('tau_retr', 0)}")
        
        embedding_service = enhanced.get('embedding_service', {})
        logger.info(f"  - –°–µ—Ä–≤–∏—Å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {embedding_service.get('current_service', 'unknown')}")
        logger.info(f"  - –ó–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–∞: {embedding_service.get('service_healthy', False)}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
    logger.info("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞:")
    
    for i, query in enumerate(TEST_QUERIES[:3], 1):  # –ü–µ—Ä–≤—ã–µ 3 –∑–∞–ø—Ä–æ—Å–∞
        logger.info(f"\n{i}. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: '{query}'")
        
        # Debug retrieve
        debug_result = await test_debug_retrieve(query)
        if "error" not in debug_result:
            diagnostics = debug_result.get("diagnostics", {})
            results = debug_result.get("results", [])
            
            logger.info(f"   üìà –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {diagnostics.get('total_results', 0)}")
            logger.info(f"   üìä –ú–∞–∫—Å. —Å–∫–æ—Ä: {diagnostics.get('max_score', 0):.3f}")
            logger.info(f"   üìä –ú–∏–Ω. —Å–∫–æ—Ä: {diagnostics.get('min_score', 0):.3f}")
            
            if results:
                logger.info(f"   ü•á –¢–æ–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç: —Å–∫–æ—Ä {results[0].get('score', 0):.3f}")
                preview = results[0].get('content_preview', '')[:100]
                logger.info(f"   üìÑ –ü—Ä–µ–≤—å—é: {preview}...")
            else:
                logger.warning("   ‚ö†Ô∏è  –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!")
        else:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ debug: {debug_result.get('error', 'unknown')}")


async def run_comprehensive_test():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ."""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ RAG")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    if not await test_api_health():
        logger.error("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
        return
    
    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    await diagnose_retrieval_issues()
    
    # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    logger.info("\nüî¨ –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ RAG:")
    
    comparison_results = []
    
    for i, query in enumerate(TEST_QUERIES, 1):
        logger.info(f"\n{i}/{len(TEST_QUERIES)}: {query}")
        
        result = await compare_rag_methods(query)
        comparison_results.append(result)
        
        # –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç
        basic = result.get("basic_rag", {})
        enhanced = result.get("enhanced_rag", {})
        
        if "error" not in basic:
            logger.info(f"  üìä –ë–∞–∑–æ–≤—ã–π RAG: {basic.get('contexts_found', 0)} –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤, –æ—Ç–≤–µ—Ç {basic.get('answer_length', 0)} —Å–∏–º–≤–æ–ª–æ–≤")
        else:
            logger.warning(f"  ‚ö†Ô∏è  –ë–∞–∑–æ–≤—ã–π RAG: {basic.get('error', 'unknown error')}")
        
        if "error" not in enhanced:
            logger.info(f"  ‚ú® Enhanced RAG: {enhanced.get('contexts_found', 0)} –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤, –æ—Ç–≤–µ—Ç {enhanced.get('answer_length', 0)} —Å–∏–º–≤–æ–ª–æ–≤")
        else:
            logger.warning(f"  ‚ö†Ô∏è  Enhanced RAG: {enhanced.get('error', 'unknown error')}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results_file = Path("test_results.json")
    try:
        with open(results_file, 'w', encoding='utf-8') as f:
            json.dump(comparison_results, f, ensure_ascii=False, indent=2)
        logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {results_file}")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {e}")
    
    logger.info("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    
    # –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    logger.info("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:")
    logger.info("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Ollama –∑–∞–ø—É—â–µ–Ω —Å –º–æ–¥–µ–ª—å—é nomic-embed-text –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
    logger.info("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –±–∞–∑—É (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >0 —á–∞–Ω–∫–æ–≤ —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏)")
    logger.info("3. –ï—Å–ª–∏ —Å–∫–æ—Ä—ã –Ω–∏–∑–∫–∏–µ (<0.4), –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Å –ª—É—á—à–∏–º–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏")
    logger.info("4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /api/v1/enhanced/query –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–∏—Å–∫–∞")


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger.remove()
    logger.add(
        lambda msg: print(msg, end=''),
        format="<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | {message}",
        level="INFO"
    )
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    try:
        asyncio.run(run_comprehensive_test())
    except KeyboardInterrupt:
        logger.info("\nüõë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —á–∏—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–∞ data_for_rag (1).xlsx
"""

import asyncio
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import pandas as pd
import httpx
from loguru import logger
from pathlib import Path

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
EXCEL_FILE = "data_for_rag (1).xlsx"
API_BASE_URL = "http://localhost:8000"


async def check_api():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API."""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{API_BASE_URL}/healthz", timeout=5.0)
            if response.status_code == 200:
                logger.info("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω")
                return True
            else:
                logger.error(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        return False


async def load_excel_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel —Ñ–∞–π–ª–∞."""
    try:
        logger.info(f"üìñ –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª: {EXCEL_FILE}")
        
        # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
        df = pd.read_excel(EXCEL_FILE)
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –≤ Excel —Ñ–∞–π–ª–µ")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        logger.info(f"üìã –ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ —Å –Ω–µ–ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        df_clean = df.dropna(subset=['name', 'chunks'])
        df_clean = df_clean[df_clean['name'].str.strip() != '']
        df_clean = df_clean[df_clean['chunks'].str.strip() != '']
        
        logger.info(f"üßπ –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å {len(df_clean)} –∑–∞–ø–∏—Å–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏")
        
        return df_clean
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel —Ñ–∞–π–ª–∞: {e}")
        return None


async def ingest_data_to_api(df):
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ RAG —Å–∏—Å—Ç–µ–º—É —á–µ—Ä–µ–∑ API."""
    try:
        async with httpx.AsyncClient(timeout=60.0) as client:
            success_count = 0
            
            for index, row in df.iterrows():
                try:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è ingestion
                    service_name = str(row.get('name', '')).strip()
                    service_chunks = str(row.get('chunks', '')).strip()
                    egov_link = str(row.get('eGov_link', '')).strip()
                    egov_kaz_link = str(row.get('eGov_kaz_link', '')).strip()
                    
                    if not service_name or not service_chunks:
                        logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å {index+1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                        continue
                    
                    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞
                    full_text = f"""–£—Å–ª—É–≥–∞: {service_name}

–û–ø–∏—Å–∞–Ω–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
{service_chunks}"""
                    
                    if egov_link and egov_link.strip() != 'nan':
                        full_text += f"\n\n–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Ä—Ç–∞–ª eGov: {egov_link}"
                    
                    if egov_kaz_link and egov_kaz_link.strip() != 'nan':
                        full_text += f"\n–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–∑–∞—Ö—Å–∫–æ–º —è–∑—ã–∫–µ: {egov_kaz_link}"
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                    metadata = {
                        "service_id": int(row.get('id', index+1)) if pd.notna(row.get('id')) else index+1,
                        "service_name": service_name,
                        "source": "egov_services",
                        "type": "government_service",
                        "language": "russian"
                    }
                    
                    if egov_link and egov_link.strip() != 'nan':
                        metadata["egov_link"] = egov_link
                    
                    if egov_kaz_link and egov_kaz_link.strip() != 'nan':
                        metadata["egov_kaz_link"] = egov_kaz_link
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ API
                    payload = {
                        "text": full_text,
                        "metadata": metadata,
                        "uri": f"egov_service_{metadata['service_id']}"
                    }
                    
                    response = await client.post(
                        f"{API_BASE_URL}/api/v1/ingest",
                        json=payload
                    )
                    
                    if response.status_code == 200:
                        success_count += 1
                        if success_count % 10 == 0:
                            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {success_count}/{len(df)} —É—Å–ª—É–≥...")
                        else:
                            logger.debug(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ª—É–≥–∞ {index+1}: {service_name[:50]}...")
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ª—É–≥–∏ {index+1}: {response.status_code} - {response.text}")
                
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏ {index+1}: {e}")
                    continue
            
            logger.info(f"üéâ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {success_count}/{len(df)} —É—Å–ª—É–≥")
            return success_count
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ API: {e}")
        return 0


async def get_stats():
    """–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{API_BASE_URL}/api/v1/stats")
            if response.status_code == 200:
                stats = response.json()
                logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats.get('total_documents', stats.get('documents', 0))} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, {stats.get('total_chunks', stats.get('chunks', 0))} —á–∞–Ω–∫–æ–≤")
                return stats
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
                return None
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return None


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —á–∏—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel")
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º API
    if not await check_api():
        logger.error("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
        return
    
    # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel
    df = await load_excel_data()
    if df is None or len(df) == 0:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel –∏–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π")
        return
    
    # 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏
    logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –î–û –∑–∞–≥—Ä—É–∑–∫–∏:")
    await get_stats()
    
    # 4. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–∏—Å—Ç–µ–º—É
    success_count = await ingest_data_to_api(df)
    
    # 5. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ü–û–°–õ–ï –∑–∞–≥—Ä—É–∑–∫–∏:")
    await get_stats()
    
    if success_count > 0:
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –ó–∞–≥—Ä—É–∂–µ–Ω–æ {success_count} —É—Å–ª—É–≥ eGov")
        logger.info("üéØ –í–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–µ –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ pandas
    try:
        import pandas as pd
    except ImportError:
        logger.error("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å pandas: pip install pandas openpyxl")
        sys.exit(1)
    
    asyncio.run(main())



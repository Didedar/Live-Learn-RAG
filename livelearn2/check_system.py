#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ Live-Learn RAG —Å–∏—Å—Ç–µ–º—ã.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python check_system.py
"""

import asyncio
import sys
from pathlib import Path
from typing import Dict, Any

import httpx
from loguru import logger


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
OLLAMA_URL = "http://localhost:11434"
RAG_URL = "http://localhost:8000"


async def check_ollama() -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å Ollama."""
    try:
        async with httpx.AsyncClient(timeout=5.0) as client:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            response = await client.get(f"{OLLAMA_URL}/api/tags")
            response.raise_for_status()
            
            data = response.json()
            models = [model["name"] for model in data.get("models", [])]
            
            return {
                "status": "ok",
                "url": OLLAMA_URL,
                "models": models,
                "model_count": len(models)
            }
            
    except Exception as e:
        return {
            "status": "error",
            "url": OLLAMA_URL,
            "error": str(e)
        }


async def check_rag_server() -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å RAG —Å–µ—Ä–≤–µ—Ä–∞."""
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            response = await client.get(f"{RAG_URL}/healthz")
            response.raise_for_status()
            basic_health = response.json()
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            response = await client.get(f"{RAG_URL}/healthz/detailed")
            response.raise_for_status()
            detailed_health = response.json()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            response = await client.get(f"{RAG_URL}/api/v1/stats")
            response.raise_for_status()
            stats = response.json()
            
            return {
                "status": "ok",
                "url": RAG_URL,
                "basic_health": basic_health,
                "detailed_health": detailed_health,
                "stats": stats
            }
            
    except Exception as e:
        return {
            "status": "error",
            "url": RAG_URL,
            "error": str(e)
        }


async def test_rag_query() -> Dict[str, Any]:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç RAG –∑–∞–ø—Ä–æ—Å."""
    try:
        test_query = "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Å–ø–æ—Ä—Ç?"
        
        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.post(
                f"{RAG_URL}/api/v1/feedback/ask",
                json={
                    "question": test_query,
                    "session_id": "health_check",
                    "top_k": 3
                }
            )
            response.raise_for_status()
            
            result = response.json()
            
            return {
                "status": "ok",
                "query": test_query,
                "answer_length": len(result.get("answer", "")),
                "contexts_count": len(result.get("contexts", [])),
                "has_answer": bool(result.get("answer", "").strip())
            }
            
    except Exception as e:
        return {
            "status": "error",
            "error": str(e)
        }


def check_files() -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤."""
    files_to_check = [
        "data_for_rag (1).xlsx",
        ".env",
        "rag.db",
        "app/main.py",
        "frontend/index.final.html"
    ]
    
    file_status = {}
    for file_path in files_to_check:
        path = Path(file_path)
        file_status[file_path] = {
            "exists": path.exists(),
            "size": path.stat().st_size if path.exists() else 0
        }
    
    return file_status


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Live-Learn RAG —Å–∏—Å—Ç–µ–º—ã")
    logger.info("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
    logger.info("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤...")
    file_status = check_files()
    
    for file_path, status in file_status.items():
        if status["exists"]:
            size_mb = status["size"] / (1024 * 1024)
            logger.info(f"   ‚úÖ {file_path} ({size_mb:.1f} MB)")
        else:
            logger.error(f"   ‚ùå {file_path} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Ollama
    logger.info("=" * 50)
    logger.info("ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ Ollama...")
    ollama_status = await check_ollama()
    
    if ollama_status["status"] == "ok":
        logger.success(f"   ‚úÖ Ollama –¥–æ—Å—Ç—É–ø–µ–Ω: {ollama_status['url']}")
        logger.info(f"   üì¶ –ú–æ–¥–µ–ª–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {ollama_status['model_count']}")
        for model in ollama_status["models"]:
            logger.info(f"      ‚Ä¢ {model}")
    else:
        logger.error(f"   ‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {ollama_status['error']}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ RAG —Å–µ—Ä–≤–µ—Ä–∞
    logger.info("=" * 50)
    logger.info("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ RAG —Å–µ—Ä–≤–µ—Ä–∞...")
    rag_status = await check_rag_server()
    
    if rag_status["status"] == "ok":
        logger.success(f"   ‚úÖ RAG —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω: {rag_status['url']}")
        
        # –î–µ—Ç–∞–ª–∏ –æ —Å–∏—Å—Ç–µ–º–µ
        basic = rag_status["basic_health"]
        detailed = rag_status["detailed_health"]
        stats = rag_status["stats"]
        
        logger.info(f"   üìä –°—Ç–∞—Ç—É—Å: {basic.get('status')}")
        logger.info(f"   üîß –í–µ—Ä—Å–∏—è: {basic.get('version')}")
        logger.info(f"   üìö –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {stats.get('documents', 0)}")
        logger.info(f"   üß© –ß–∞–Ω–∫–æ–≤: {stats.get('chunks', 0)}")
        logger.info(f"   üéØ –ü–æ–∫—Ä—ã—Ç–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏: {stats.get('embedding_coverage', 0):.1%}")
        
        # –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        checks = detailed.get("checks", {})
        for component, check in checks.items():
            status = check.get("status", "unknown")
            if status in ["ok", "healthy"]:
                logger.info(f"   ‚úÖ {component}: {status}")
            elif status in ["disabled", "not_configured"]:
                logger.info(f"   ‚ö™ {component}: {status}")
            else:
                logger.warning(f"   ‚ö†Ô∏è {component}: {status}")
                
    else:
        logger.error(f"   ‚ùå RAG —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {rag_status['error']}")
    
    # –¢–µ—Å—Ç RAG –∑–∞–ø—Ä–æ—Å–∞
    if rag_status["status"] == "ok":
        logger.info("=" * 50)
        logger.info("üß™ –¢–µ—Å—Ç RAG –∑–∞–ø—Ä–æ—Å–∞...")
        test_result = await test_rag_query()
        
        if test_result["status"] == "ok":
            logger.success(f"   ‚úÖ –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {test_result['query']}")
            logger.info(f"   üìù –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {test_result['answer_length']} —Å–∏–º–≤–æ–ª–æ–≤")
            logger.info(f"   üìã –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤: {test_result['contexts_count']}")
            
            if test_result["has_answer"]:
                logger.success("   ‚úÖ –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
            else:
                logger.warning("   ‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
        else:
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {test_result['error']}")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    logger.info("=" * 50)
    
    overall_ok = (
        ollama_status["status"] == "ok" and
        rag_status["status"] == "ok" and
        file_status["data_for_rag (1).xlsx"]["exists"] and
        file_status["rag.db"]["exists"]
    )
    
    if overall_ok:
        logger.success("üéâ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–∞!")
        logger.info("")
        logger.info("üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:")
        logger.info(f"   ‚Ä¢ API: {RAG_URL}/docs")
        logger.info(f"   ‚Ä¢ –°—Ç–∞—Ç—É—Å: {RAG_URL}/healthz/detailed")
        logger.info("   ‚Ä¢ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: frontend/index.final.html")
        logger.info("")
        logger.info("üí° –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:")
        logger.info(f'   curl -X POST "{RAG_URL}/api/v1/feedback/ask" \\')
        logger.info('     -H "Content-Type: application/json" \\')
        logger.info('     -d \'{"question": "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É?", "top_k": 3}\'')
        
        return 0
    else:
        logger.error("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        logger.info("")
        logger.info("üîß –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã:")
        logger.info("   python deploy_system.py")
        logger.info("")
        logger.info("üîß –î–ª—è —Ä—É—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        logger.info("   1. python setup_ollama.py")
        logger.info("   2. python -m app.main")
        logger.info("   3. python load_full_data.py")
        
        return 1


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger.remove()
    logger.add(
        lambda msg: print(msg, end=''),
        format="<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | {message}",
        level="INFO",
        colorize=True
    )
    
    # –ó–∞–ø—É—Å–∫
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        logger.info("\nüõë –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
        sys.exit(1)
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        sys.exit(1)

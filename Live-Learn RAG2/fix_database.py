#!/usr/bin/env python3
"""–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ async/await."""

import os
import sys
from pathlib import Path
import shutil
from datetime import datetime

def main():
    print("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö RAG —Å–∏—Å—Ç–µ–º—ã...")

    # 1. –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    db_path = Path("rag.db")
    if db_path.exists():
        backup = f"rag_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db"
        shutil.copy2(db_path, backup)
        print(f"üì¶ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup}")

    # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª—å documents.py
    print("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º app/models/documents.py...")
    doc_model = Path("app/models/documents.py")
    
    if not doc_model.exists():
        print("‚ùå –§–∞–π–ª app/models/documents.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    try:
        content = doc_model.read_text(encoding='utf-8')
        original_content = content
        
        # –î–æ–±–∞–≤–ª—è–µ–º ForeignKey –∏–º–ø–æ—Ä—Ç –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if "ForeignKey" not in content:
            content = content.replace(
                "from sqlalchemy import DateTime, Integer, JSON, String, Text, func",
                "from sqlalchemy import DateTime, Integer, JSON, String, Text, func, ForeignKey"
            )
            print("  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç ForeignKey")
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º document_id —Å ForeignKey
        if 'ForeignKey("documents.id")' not in content:
            content = content.replace(
                'document_id: Mapped[int] = mapped_column(Integer, index=True)',
                'document_id: Mapped[int] = mapped_column(Integer, ForeignKey("documents.id"), index=True)'
            )
            print("  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω ForeignKey –≤ Chunk.document_id")
        
        if content != original_content:
            doc_model.write_text(content, encoding='utf-8')
            print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω app/models/documents.py")
        else:
            print("‚úÖ app/models/documents.py —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ documents.py: {e}")
        return False

    # 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª—å feedback.py
    print("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º app/models/feedback.py...")
    feedback_model = Path("app/models/feedback.py")
    
    if feedback_model.exists():
        try:
            content = feedback_model.read_text(encoding='utf-8')
            original_content = content
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
            if "ForeignKey" not in content:
                content = content.replace(
                    "from sqlalchemy import JSON, DateTime, Enum as SQLEnum, Float, Integer, String, Text, func",
                    "from sqlalchemy import JSON, DateTime, Enum as SQLEnum, Float, ForeignKey, Integer, String, Text, func, Boolean"
                )
                print("  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –∏–º–ø–æ—Ä—Ç—ã ForeignKey –∏ Boolean")
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ ForeignKey —Å–≤—è–∑–∏
            replacements = [
                ('message_id: Mapped[str] = mapped_column(String(36), index=True)',
                 'message_id: Mapped[str] = mapped_column(String(36), ForeignKey("message_sessions.id"), index=True)'),
                ('feedback_event_id: Mapped[str] = mapped_column(String(36), index=True)',
                 'feedback_event_id: Mapped[str] = mapped_column(String(36), ForeignKey("feedback_events.id"), index=True)'),
                ('chunk_id: Mapped[int] = mapped_column(Integer, unique=True, index=True)',
                 'chunk_id: Mapped[int] = mapped_column(Integer, ForeignKey("chunks.id"), unique=True, index=True)'),
                ('is_deprecated: Mapped[bool] = mapped_column(default=False)',
                 'is_deprecated: Mapped[bool] = mapped_column(Boolean, default=False)')
            ]
            
            changes_made = 0
            for old_text, new_text in replacements:
                if old_text in content and new_text not in content:
                    content = content.replace(old_text, new_text)
                    changes_made += 1
            
            if content != original_content:
                feedback_model.write_text(content, encoding='utf-8')
                print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω app/models/feedback.py ({changes_made} –∏–∑–º–µ–Ω–µ–Ω–∏–π)")
            else:
                print("‚úÖ app/models/feedback.py —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ feedback.py: {e}")
            return False
    else:
        print("‚ö†Ô∏è –§–∞–π–ª app/models/feedback.py –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # 4. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –±–∞–∑—É –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
    print("üóÑÔ∏è –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    
    if db_path.exists():
        db_path.unlink()
        print("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")

    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å Python
        sys.path.insert(0, ".")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É
        from app.database import init_db
        init_db()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        return False

    # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–≤—è–∑–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from app.database import get_db_session
        from app.models.documents import Document, Chunk
        
        with get_db_session() as db:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
            doc = Document(
                uri="test://fix_test", 
                doc_metadata={"title": "Test Document"}
            )
            db.add(doc)
            db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –¥–æ–∫—É–º–µ–Ω—Ç–∞
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞–Ω–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–≤—è–∑—å—é
            chunk = Chunk(
                document_id=doc.id,  # –¢–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å!
                ordinal=0,
                content="Test content for database fix",
                embedding=[]
            )
            db.add(chunk)
            
            # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            db.commit()
            
            print("‚úÖ –¢–µ—Å—Ç —Å–≤—è–∑–µ–π –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
            print(f"  üìä –°–æ–∑–¥–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç ID: {doc.id}")
            print(f"  üìä –°–æ–∑–¥–∞–Ω —á–∞–Ω–∫ ID: {chunk.id}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ —Å–≤—è–∑–∏ –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        return False

    # 6. –§–∏–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    print("\nüéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ GOOGLE_API_KEY –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ:")
    print("   echo 'GOOGLE_API_KEY=your_key_here' >> .env")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:")
    print("   python -m uvicorn app.main:app --reload --host 0.0.0.0 --port 8000")
    print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ API:")
    print("   curl http://localhost:8000/healthz")
    print("4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ ask endpoint:")
    print('   curl -X POST "http://localhost:8000/api/v1/feedback/ask" \\')
    print('     -H "Content-Type: application/json" \\')
    print('     -d \'{"question":"What is AI?","session_id":"test"}\'')
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        if success:
            print("\n‚úÖ –í—Å–µ –≥–æ—Ç–æ–≤–æ! –ó–∞–ø—É—Å–∫–∞–π—Ç–µ —Å–µ—Ä–≤–µ—Ä.")
            sys.exit(0)
        else:
            print("\n‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n‚ùå –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
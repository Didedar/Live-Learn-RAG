#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± —É—Å–ª—É–≥–∞—Ö eGov –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ RAG —Å–∏—Å—Ç–µ–º—ã.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∏–∑ Excel —Ñ–∞–π–ª–∞ 'data_for_rag 1.xlsx'
–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Ö —á–µ—Ä–µ–∑ API endpoint /v1/ingest/egov-data

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python load_egov_data.py

–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ RAG —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000 –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω GOOGLE_API_KEY
"""

import asyncio
import json
import sys
from typing import List, Dict, Any

import httpx
from loguru import logger

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = "http://localhost:8000"
BATCH_SIZE = 25  # –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä batch –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
MAX_RETRIES = 3


# –û–±—Ä–∞–∑—Ü—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (–ø–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π –∏–∑ 844)
SAMPLE_EGOV_DATA = [
    {
        "id": 1,
        "name": "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–µ—Å—Ç—É –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –≥—Ä–∞–∂–¥–∞–Ω —Ä–µ—Å–ø—É–±–ª–∏–∫–∏ –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω",
        "eGov_link": "https://egov.kz/cms/ru/services/pass001_mvd",
        "chunks": "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —É—Å–ª—É–≥—É –æ–Ω–ª–∞–π–Ω\r\n–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ –∏ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ –∫–Ω–æ–ø–∫–µ ¬´–ó–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É –æ–Ω–ª–∞–π–Ω¬ª.\r\n–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å –µ–µ –≠–¶–ü (—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–¥–ø–∏—Å—å—é) –ª–∏–±–æ –ø—Ä–∏ –ø–æ–º–æ—â–∏ —Å–º—Å-–ø–∞—Ä–æ–ª—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏–º–µ—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –±–∞–∑–µ –º–æ–±–∏–ª—å–Ω—ã—Ö –≥—Ä–∞–∂–¥–∞–Ω). –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –æ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞ –∂–∏–ª—å—è, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–µ –≠–¶–ü (–µ—Å–ª–∏ –∑–∞—è–≤–∏—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–º –∂–∏–ª—å—è). –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –æ—Ç —Å–æ–≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∂–∏–ª—å—è, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–µ –≠–¶–ü (–µ—Å–ª–∏ –∑–∞—è–≤–∏—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–º –∂–∏–ª—å—è).\r\n–í –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ (–≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å–ª—É–≥¬ª) –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ—Å—Ç—É–ø–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.\r\n–î–∞–Ω–Ω–∞—è —É—Å–ª—É–≥–∞ –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º—É –º–µ—Å—Ç—É –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞.",
        "eGov_kaz_link": "https://egov.kz/cms/kk/services/pass001_mvd"
    },
    {
        "id": 2,
        "name": "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –∞–∫—Ç–æ–≤ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è",
        "eGov_link": "https://egov.kz/cms/ru/services/pass021_mu",
        "chunks": "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —É—Å–ª—É–≥—É –æ–Ω–ª–∞–π–Ω\r\n\r\n–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ –∏ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ –∫–Ω–æ–ø–∫–µ ¬´–ó–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É –æ–Ω–ª–∞–π–Ω¬ª.\r\n–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å –µ–µ –≠–¶–ü (—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–¥–ø–∏—Å—å—é) –ª–∏–±–æ –ø—Ä–∏ –ø–æ–º–æ—â–∏ —Å–º—Å-–ø–∞—Ä–æ–ª—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏–º–µ—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –±–∞–∑–µ –º–æ–±–∏–ª—å–Ω—ã—Ö –≥—Ä–∞–∂–¥–∞–Ω).\r\n–í –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ (–≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å–ª—É–≥¬ª) –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ—Å—Ç—É–ø–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.",
        "eGov_kaz_link": "https://egov.kz/cms/kk/services/pass021_mu"
    },
    {
        "id": 3,
        "name": "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –ª–∏—Ü —Å –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏-–≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏",
        "eGov_link": "https://egov.kz/cms/ru/services/disabled_persons/pass02_mtszn",
        "chunks": "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —É—Å–ª—É–≥—É –æ–Ω–ª–∞–π–Ω\r\n–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ –∏ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ –∫–Ω–æ–ø–∫–µ ¬´–ó–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É –æ–Ω–ª–∞–π–Ω¬ª.\r\n–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å –µ–µ –≠–¶–ü (—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–¥–ø–∏—Å—å—é) –ª–∏–±–æ –ø—Ä–∏ –ø–æ–º–æ—â–∏ —Å–º—Å-–ø–∞—Ä–æ–ª—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏–º–µ—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –±–∞–∑–µ –º–æ–±–∏–ª—å–Ω—ã—Ö –≥—Ä–∞–∂–¥–∞–Ω).\r\n–í –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ (–≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å–ª—É–≥¬ª) –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ—Å—Ç—É–ø–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.",
        "eGov_kaz_link": "https://egov.kz/cms/kk/services/disabled_persons/pass02_mtszn"
    },
    {
        "id": 4,
        "name": "–í—ã–¥–∞—á–∞ —Å–ø—Ä–∞–≤–∫–∏ –æ —Å–æ—Å—Ç–∞–≤–µ —Å–µ–º—å–∏",
        "eGov_link": "https://egov.kz/cms/ru/services/certificate_family_composition",
        "chunks": "–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è —É—Å–ª—É–≥–∞ –ø–æ –≤—ã–¥–∞—á–µ —Å–ø—Ä–∞–≤–∫–∏ –æ —Å–æ—Å—Ç–∞–≤–µ —Å–µ–º—å–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞—Å–µ–ª–µ–Ω–∏—é —á–µ—Ä–µ–∑ –ø–æ—Ä—Ç–∞–ª —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—É—é –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—é.\r\n\r\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å–ª—É–≥–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\r\n1. –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ egov.kz\r\n2. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É\r\n3. –ü–æ–¥–ø–∏—Å–∞—Ç—å –≠–¶–ü –∏–ª–∏ SMS-–ø–∞—Ä–æ–ª–µ–º\r\n4. –ü–æ–ª—É—á–∏—Ç—å –≥–æ—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ",
        "eGov_kaz_link": "https://egov.kz/cms/kk/services/certificate_family_composition"
    },
    {
        "id": 5,
        "name": "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Å–ø–æ—Ä—Ç–∞ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω",
        "eGov_link": "https://egov.kz/cms/ru/services/passport_kz",
        "chunks": "–£—Å–ª—É–≥–∞ –ø–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –ø–∞—Å–ø–æ—Ä—Ç–∞ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞ –†–ö –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è:\r\n- –ß–µ—Ä–µ–∑ –ø–æ—Ä—Ç–∞–ª egov.kz (–æ–Ω–ª–∞–π–Ω –ø–æ–¥–∞—á–∞)\r\n- –í —Ü–µ–Ω—Ç—Ä–∞—Ö –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –Ω–∞—Å–µ–ª–µ–Ω–∏—è\r\n- –í –ú–í–î –∏ –µ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è—Ö\r\n\r\n–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\r\n- –ó–∞—è–≤–ª–µ–Ω–∏–µ\r\n- –°–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ –æ —Ä–æ–∂–¥–µ–Ω–∏–∏\r\n- –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\r\n- –î–æ–∫—É–º–µ–Ω—Ç –æ–± –æ–ø–ª–∞—Ç–µ –≥–æ—Å–ø–æ—à–ª–∏–Ω—ã\r\n\r\n–°—Ä–æ–∫ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: 15 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π",
        "eGov_kaz_link": "https://egov.kz/cms/kk/services/passport_kz"
    }
]


async def check_api_health() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å API."""
    try:
        async with httpx.AsyncClient() as client:
            logger.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API...")
            
            response = await client.get(f"{API_BASE_URL}/healthz", timeout=10.0)
            response.raise_for_status()
            
            health_data = response.json()
            logger.info(f"API —Å—Ç–∞—Ç—É—Å: {health_data.get('status')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            detailed_response = await client.get(f"{API_BASE_URL}/healthz/detailed", timeout=10.0)
            detailed_response.raise_for_status()
            detailed_data = detailed_response.json()
            
            logger.info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {detailed_data.get('checks', {}).get('database', {}).get('status')}")
            logger.info(f"Gemini AI: {detailed_data.get('checks', {}).get('gemini', {}).get('status')}")
            
            if not health_data.get('ai_configured', False):
                logger.error("‚ùå AI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ GOOGLE_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                return False
            
            return health_data.get('status') == 'ok'
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        logger.error("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ RAG —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
        return False


async def get_stats() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É RAG —Å–∏—Å—Ç–µ–º—ã."""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{API_BASE_URL}/v1/stats", timeout=10.0)
            response.raise_for_status()
            return response.json()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")
        return {}


async def upload_batch_with_retry(client: httpx.AsyncClient, batch: List[Dict[str, Any]], batch_num: int) -> bool:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç batch –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏."""
    
    for attempt in range(1, MAX_RETRIES + 1):
        try:
            logger.info(f"üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º batch {batch_num} (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{MAX_RETRIES})")
            
            response = await client.post(
                f"{API_BASE_URL}/v1/ingest/egov-data",
                json=batch,
                timeout=300.0  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
            )
            
            response.raise_for_status()
            result = response.json()
            
            logger.success(
                f"‚úÖ Batch {batch_num} –∑–∞–≥—Ä—É–∂–µ–Ω: –¥–æ–∫—É–º–µ–Ω—Ç {result['document_id']}, "
                f"{result['chunks']} —á–∞–Ω–∫–æ–≤ —Å–æ–∑–¥–∞–Ω–æ"
            )
            return True
            
        except httpx.TimeoutException:
            logger.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ batch {batch_num} (–ø–æ–ø—ã—Ç–∫–∞ {attempt})")
            if attempt < MAX_RETRIES:
                await asyncio.sleep(5 * attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            
        except httpx.HTTPStatusError as e:
            logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ {e.response.status_code} –¥–ª—è batch {batch_num}: {e.response.text}")
            if e.response.status_code >= 500 and attempt < MAX_RETRIES:
                await asyncio.sleep(10 * attempt)
            else:
                break
                
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è batch {batch_num}: {e}")
            if attempt < MAX_RETRIES:
                await asyncio.sleep(5 * attempt)
    
    logger.error(f"üí• –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å batch {batch_num} –ø–æ—Å–ª–µ {MAX_RETRIES} –ø–æ–ø—ã—Ç–æ–∫")
    return False


async def test_query(client: httpx.AsyncClient):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    test_queries = [
        "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Å–ø–æ—Ä—Ç?",
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–µ—Å—Ç—É –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞",
        "–°–ø—Ä–∞–≤–∫–∞ –æ —Å–æ—Å—Ç–∞–≤–µ —Å–µ–º—å–∏",
        "–£—Å–ª—É–≥–∏ –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–æ–≤"
    ]
    
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    for query in test_queries:
        try:
            response = await client.post(
                f"{API_BASE_URL}/v1/query",
                json={"query": query, "top_k": 3},
                timeout=30.0
            )
            response.raise_for_status()
            result = response.json()
            
            logger.info(f"üìã –ó–∞–ø—Ä–æ—Å: '{query}'")
            logger.info(f"   –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤: {len(result.get('citations', []))}")
            logger.info(f"   –û—Ç–≤–µ—Ç: {result.get('answer', '')[:100]}...")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ '{query}': {e}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö."""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö eGov —É—Å–ª—É–≥ –≤ RAG —Å–∏—Å—Ç–µ–º—É")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API
    if not await check_api_health():
        logger.error("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É.")
        return 1
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏
    stats_before = await get_stats()
    logger.info(
        f"üìä –î–æ –∑–∞–≥—Ä—É–∑–∫–∏: {stats_before.get('documents', 0)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, "
        f"{stats_before.get('chunks', 0)} —á–∞–Ω–∫–æ–≤"
    )
    
    # –í —ç—Ç–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞–∑–µ—Ü –¥–∞–Ω–Ω—ã—Ö
    data_to_upload = SAMPLE_EGOV_DATA
    logger.info(f"üìù –ë—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(data_to_upload)} –∑–∞–ø–∏—Å–µ–π eGov —É—Å–ª—É–≥ (–æ–±—Ä–∞–∑–µ—Ü)")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ batches
    total_batches = (len(data_to_upload) + BATCH_SIZE - 1) // BATCH_SIZE
    successful_batches = 0
    
    logger.info(f"üì¶ –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ {total_batches} batches –ø–æ {BATCH_SIZE} –∑–∞–ø–∏—Å–µ–π")
    
    async with httpx.AsyncClient() as client:
        for i in range(0, len(data_to_upload), BATCH_SIZE):
            batch_num = (i // BATCH_SIZE) + 1
            batch_data = data_to_upload[i:i + BATCH_SIZE]
            
            if await upload_batch_with_retry(client, batch_data, batch_num):
                successful_batches += 1
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É batches
            if i + BATCH_SIZE < len(data_to_upload):
                await asyncio.sleep(2)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await asyncio.sleep(3)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
        stats_after = await get_stats()
        
        # –û—Ç—á–µ—Ç
        logger.info("üéâ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö batches: {successful_batches}/{total_batches}")
        logger.info(
            f"üìä –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏: {stats_after.get('documents', 0)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, "
            f"{stats_after.get('chunks', 0)} —á–∞–Ω–∫–æ–≤"
        )
        
        if stats_before and stats_after:
            docs_added = stats_after.get('documents', 0) - stats_before.get('documents', 0)
            chunks_added = stats_after.get('chunks', 0) - stats_before.get('chunks', 0)
            logger.info(f"üìà –î–æ–±–∞–≤–ª–µ–Ω–æ: {docs_added} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, {chunks_added} —á–∞–Ω–∫–æ–≤")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        if successful_batches > 0:
            await test_query(client)
        
        if successful_batches == total_batches:
            logger.success("üéä –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ!")
            logger.info("üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É—Å–ª—É–≥–∞—Ö –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞")
            return 0
        else:
            logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å")
            return 1


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger.remove()
    logger.add(
        lambda msg: print(msg, end=''),
        format="<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | {message}",
        level="INFO",
        colorize=True
    )
    
    # –ó–∞–ø—É—Å–∫
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        logger.info("\nüõë –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
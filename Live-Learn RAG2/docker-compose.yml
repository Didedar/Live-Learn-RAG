version: '3.8'

services:
  # RAG Application
  rag-app:
    build: .
    container_name: live-learn-rag
    ports:
      - "8000:8000"
    environment:
      - APP_ENV=docker
      - DB_PATH=/app/data/rag.db
      - OLLAMA_BASE_URL=http://ollama:11434
      - EMBEDDING_MODEL=nomic-embed-text
      - LLM_MODEL=llama3.1:8b
      - DEBUG=false
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - ollama
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Ollama Service
  ollama:
    image: ollama/ollama:latest
    container_name: ollama-service
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0:11434
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Model initialization service
  model-init:
    image: ollama/ollama:latest
    container_name: model-init
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=ollama:11434
    depends_on:
      - ollama
    restart: "no"
    command: >
      sh -c "
        echo 'Waiting for Ollama to be ready...' &&
        while ! curl -f http://ollama:11434/api/tags; do
          sleep 5
        done &&
        echo 'Pulling required models...' &&
        ollama pull llama3.1:8b &&
        ollama pull nomic-embed-text &&
        echo 'Models ready!'
      "

  # Optional: Redis for caching (future enhancement)
  redis:
    image: redis:7-alpine
    container_name: rag-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    profiles: ["with-redis"]
    command: redis-server --appendonly yes

  # Optional: Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: rag-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    restart: unless-stopped
    profiles: ["monitoring"]

  # Optional: Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: rag-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    restart: unless-stopped
    profiles: ["monitoring"]

  # Optional: Vector database (Qdrant)
  qdrant:
    image: qdrant/qdrant:latest
    container_name: rag-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    restart: unless-stopped
    profiles: ["with-qdrant"]

volumes:
  ollama_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  qdrant_data:
    driver: local

networks:
  default:
    name: rag-network